package controller;

import dao.AdminPromotionDAO;
import model.Promotion;
import util.DatabaseConnection;
import java.io.IOException;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.List;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@WebServlet("/admin/promotions")
public class AdminPromotionServlet extends HttpServlet {
    private AdminPromotionDAO promotionDAO;

    @Override
    public void init() {
        Connection conn = null;
        try {
            conn = DatabaseConnection.getConnection();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
        promotionDAO = new AdminPromotionDAO(conn);
    }

    // 1Ô∏è‚É£ L·∫•y danh s√°ch t·∫•t c·∫£ ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i (GET)
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        List<Promotion> promotions = promotionDAO.getAllPromotions();
        request.setAttribute("promotions", promotions);
        request.getRequestDispatcher("/admin/admin_promotion.jsp").forward(request, response);
    }

    @Override
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        System.out.println("DEBUG: Nh·∫≠n request POST");

        // Ki·ªÉm tra t·∫•t c·∫£ c√°c tham s·ªë g·ª≠i t·ª´ request
        request.getParameterMap().forEach((key, value) ->
                System.out.println("Param: " + key + " = " + (value.length > 0 ? value[0] : "null"))
        );

        String promoCode = request.getParameter("promo_code");
        String discountAmountStr = request.getParameter("discount_amount");
        String discountPercentageStr = request.getParameter("discount_percentage");

        System.out.println("DEBUG: promo_code = " + promoCode);
        System.out.println("DEBUG: discount_amount = " + discountAmountStr);
        System.out.println("DEBUG: discount_percentage = " + discountPercentageStr);

        if (promoCode == null || promoCode.trim().isEmpty()) {
            System.out.println("ERROR: promo_code b·ªã null!");
            response.sendRedirect(request.getContextPath() + "/admin/promotions?error=emptyPromoCode");
            return;
        }

        BigDecimal discountAmount = (discountAmountStr == null || discountAmountStr.trim().isEmpty())
                ? null : new BigDecimal(discountAmountStr);

        BigDecimal discountPercentage = (discountPercentageStr == null || discountPercentageStr.trim().isEmpty())
                ? null : new BigDecimal(discountPercentageStr);

        Timestamp validFrom = parseTimestamp(request.getParameter("valid_from"));
        Timestamp validTo = parseTimestamp(request.getParameter("valid_to"));
        boolean isActive = Boolean.parseBoolean(request.getParameter("is_active"));

        Promotion promotion = new Promotion(0, promoCode, discountAmount, discountPercentage, validFrom, validTo, isActive);
        promotionDAO.addPromotion(promotion);

        System.out.println("‚úÖ Th√†nh c√¥ng: ƒê√£ th√™m khuy·∫øn m√£i " + promoCode);
        response.sendRedirect(request.getContextPath() + "/admin/promotions");
    }



    // 3Ô∏è‚É£ C·∫≠p nh·∫≠t ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i (PUT)
    @Override
    protected void doPut(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        int promoId = Integer.parseInt(request.getParameter("promotion_id"));
        String promoCode = request.getParameter("promo_code");
        BigDecimal discountAmount = new BigDecimal(request.getParameter("discount_amount"));
        BigDecimal discountPercentage = new BigDecimal(request.getParameter("discount_percentage"));
        Timestamp validFrom = parseTimestamp(request.getParameter("valid_from"));
        Timestamp validTo = parseTimestamp(request.getParameter("valid_to"));
        boolean isActive = Boolean.parseBoolean(request.getParameter("is_active"));

        Promotion promotion = new Promotion(promoId, promoCode, discountAmount, discountPercentage, validFrom, validTo, isActive);
        promotionDAO.updatePromotion(promotion);

        response.sendRedirect("/admin/promotions");
    }

    // 4Ô∏è‚É£ X√≥a ho·∫∑c v√¥ hi·ªáu h√≥a ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i (DELETE)
    @Override
    protected void doDelete(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        int promoId = Integer.parseInt(request.getParameter("promotion_id"));
        promotionDAO.disablePromotion(promoId);

        response.sendRedirect("/admin/promotions");
    }

    private Timestamp parseTimestamp(String dateStr) {
        if (dateStr == null || dateStr.isEmpty()) return null;

        // üõ† Ch·∫Øc ch·∫Øn r·∫±ng input c√≥ ƒë·ªãnh d·∫°ng ƒë√∫ng
        if (dateStr.length() == 16) { // `yyyy-MM-ddTHH:mm`
            dateStr = dateStr.replace("T", " ") + ":00"; // Chuy·ªÉn th√†nh `yyyy-MM-dd HH:mm:ss`
        }

        return Timestamp.valueOf(dateStr);
    }

}
