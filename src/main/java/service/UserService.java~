package service;

import model.User;
import org.mindrot.jbcrypt.BCrypt;
import dao.UserDAO;
import util.DatabaseConnection;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;

public class UserService {
    private UserDAO userDAO;

    public UserService() {
        this.userDAO = new UserDAO();
    }

    public boolean isUserExist(String email, String username) {
        return userDAO.isUserExist(email, username);
    }

    private boolean isValidPassword(String password) {
        String passwordPattern = "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[^\\s]{8,32}$";
        return password.matches(passwordPattern);
    }

    public String registerUser(String username, String password, String email, String phone, String fullName) {
        if (userDAO.isUserExist(email, username)) {
            return "Email hoặc tên đăng nhập đã tồn tại!";
        }

        if (!isValidPassword(password)) {
            return "Mật khẩu phải có ít nhất 8 ký tự, bao gồm chữ hoa, chữ thường, số và không có khoảng trắng.";
        }

        String hashedPassword = BCrypt.hashpw(password, BCrypt.gensalt(12));
        User user = new User(username, hashedPassword, email, phone, fullName);
        boolean success = userDAO.saveUser(user);
        return success ? "success" : "Đăng ký thất bại, vui lòng thử lại!";
    }

    private static final Map<String, CodeInfo> resetCodes = new HashMap<>(); // Lưu mã và thời gian hết hạn

    // Lớp lưu mã và thời gian hết hạn
    private static class CodeInfo {
        String code;
        LocalDateTime expiresAt;

        public CodeInfo(String code, LocalDateTime expiresAt) {
            this.code = code;
            this.expiresAt = expiresAt;
        }
    }

    // Gửi mã đặt lại mật khẩu qua email
    public boolean sendPasswordResetCode(String email) {
        User user = userDAO.findByUsernameOrEmail(email);
        if (user == null) {
            return false;
        }

        String resetCode = generateResetCode();
        LocalDateTime expiresAt = LocalDateTime.now().plusMinutes(10); // Mã hết hạn sau 10 phút
        resetCodes.put(email, new CodeInfo(resetCode, expiresAt));

        String subject = "Mã xác nhận khôi phục mật khẩu";
        String body = "Mã xác nhận của bạn là: " + resetCode +
                "\nMã có hiệu lực trong 10 phút." +
                "\nNếu bạn không yêu cầu đặt lại mật khẩu, vui lòng bỏ qua email này.";

        EmailService.sendEmail(email, subject, body);
        return true;
    }

    // Xác minh mã khôi phục
    public boolean verifyResetCode(String email, String code) {
        if (!resetCodes.containsKey(email)) {
            return false;
        }

        CodeInfo codeInfo = resetCodes.get(email);
        if (LocalDateTime.now().isAfter(codeInfo.expiresAt)) { // Kiểm tra thời gian hết hạn
            resetCodes.remove(email);
            return false;
        }

        return codeInfo.code.equals(code);
    }

    // Đặt lại mật khẩu nếu mã hợp lệ
    public boolean resetPassword(String email, String code, String newPassword) {
        if (!verifyResetCode(email, code)) {
            return false;
        }

        if (!isValidPassword(newPassword)) {
            return false;
        }

        String hashedPassword = BCrypt.hashpw(newPassword, BCrypt.gensalt(12));
        boolean success = userDAO.updatePassword(email, hashedPassword);

        if (success) {
            resetCodes.remove(email); // Xóa mã sau khi sử dụng
        }
        return success;
    }

    // Sinh mã xác nhận ngẫu nhiên (6 chữ số)
    private String generateResetCode() {
        Random rand = new Random();
        int code = 100000 + rand.nextInt(900000);
        return String.valueOf(code);
    }

    public boolean updatePassword(String email, String newPasswordHash) {
        String sql = "UPDATE Users SET password_hash = ? WHERE email = ?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, newPasswordHash);
            stmt.setString(2, email);
            return stmt.executeUpdate() > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }


}
