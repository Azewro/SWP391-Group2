package service;

import dao.AdminTicketPromotionDAO;
import dao.AdminUserPromotionDAO;
import dao.AdminPromotionDAO;
import model.UserPromotion;
import model.TicketPromotion;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.Timestamp;
import java.util.List;

public class AutoPromotionJob implements Runnable {
    private AdminUserPromotionDAO userPromotionDAO;
    private AdminTicketPromotionDAO ticketPromotionDAO;
    private AdminPromotionDAO promotionDAO;

    public AutoPromotionJob(Connection conn) {
        this.userPromotionDAO = new AdminUserPromotionDAO(conn);
        this.ticketPromotionDAO = new AdminTicketPromotionDAO(conn);
        this.promotionDAO = new AdminPromotionDAO(conn);
    }

    @Override
    @Override
    public void run() {
        System.out.println("üîÑ ƒêang ch·∫°y Cron Job c·∫•p m√£ gi·∫£m gi√°...");
        applyVipDiscount();
        applyLowTrafficDiscount();
        applyNewUserDiscount();
        applyOffPeakDiscount(); // üÜï Gi·∫£m gi√° gi·ªù th·∫•p ƒëi·ªÉm
        System.out.println("‚úÖ Cron Job ho√†n th√†nh!");
    }


    // 1Ô∏è‚É£ T·ª± ƒë·ªông c·∫•p m√£ gi·∫£m gi√° cho kh√°ch VIP
    private void applyVipDiscount() {
        List<Integer> vipUsers = userPromotionDAO.getVipUsers(5); // L·∫•y danh s√°ch kh√°ch h√†ng ƒë√£ mua ‚â•5 v√©
        for (int userId : vipUsers) {
            userPromotionDAO.addUserPromotion(new UserPromotion(
                    0, userId, new BigDecimal("10.0"), "VIP10", new Timestamp(System.currentTimeMillis() + 2592000000L) // H·∫°n 30 ng√†y
            ));
            System.out.println("üéüÔ∏è ƒê√£ c·∫•p m√£ VIP10 cho user " + userId);
        }
    }

    // 2Ô∏è‚É£ Gi·∫£m gi√° cho tuy·∫øn xe v·∫Øng kh√°ch (>50% gh·∫ø tr·ªëng)
    private void applyLowTrafficDiscount() {
        List<Integer> lowTrafficTrips = ticketPromotionDAO.getLowTrafficTrips(50); // L·∫•y danh s√°ch chuy·∫øn xe √≠t kh√°ch
        for (int tripId : lowTrafficTrips) {
            ticketPromotionDAO.addTicketPromotion(new TicketPromotion(
                    0, tripId, new BigDecimal("15.0"), "LOWTRAFFIC15", new Timestamp(System.currentTimeMillis() + 86400000L) // H·∫°n 1 ng√†y
            ));
            System.out.println("üöå ƒê√£ gi·∫£m gi√° 15% cho tuy·∫øn " + tripId);
        }
    }

    // 3Ô∏è‚É£ Gi·∫£m gi√° cho kh√°ch h√†ng m·ªõi (L·∫ßn ƒë·∫ßu ƒë·∫∑t v√©)
    private void applyNewUserDiscount() {
        List<Integer> newUsers = userPromotionDAO.getNewUsers(); // L·∫•y danh s√°ch user ch∆∞a t·ª´ng ƒë·∫∑t v√©
        for (int userId : newUsers) {
            userPromotionDAO.addUserPromotion(new UserPromotion(
                    0, userId, new BigDecimal("10.0"), "NEWUSER10",
                    new Timestamp(System.currentTimeMillis() + 2592000000L) // H·∫°n 30 ng√†y
            ));
            System.out.println("üéâ ƒê√£ c·∫•p m√£ NEWUSER10 cho user " + userId);
        }
    }

    // 4Ô∏è‚É£ Gi·∫£m gi√° cho c√°c tuy·∫øn xe ch·∫°y gi·ªù th·∫•p ƒëi·ªÉm (10h - 15h)
    private void applyOffPeakDiscount() {
        List<Integer> offPeakTrips = ticketPromotionDAO.getOffPeakTrips(10, 15); // L·∫•y danh s√°ch chuy·∫øn xe kh·ªüi h√†nh t·ª´ 10h - 15h
        for (int tripId : offPeakTrips) {
            ticketPromotionDAO.addTicketPromotion(new TicketPromotion(
                    0, tripId, new BigDecimal("10.0"), "OFFPEAK10",
                    new Timestamp(System.currentTimeMillis() + 86400000L) // H·∫°n s·ª≠ d·ª•ng trong ng√†y
            ));
            System.out.println("‚è∞ ƒê√£ gi·∫£m gi√° 10% cho tuy·∫øn xe gi·ªù th·∫•p ƒëi·ªÉm " + tripId);
        }
    }

}
